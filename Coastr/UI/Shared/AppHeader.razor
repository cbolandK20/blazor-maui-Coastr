@using System.ComponentModel
@implements IDisposable
@inject StateContainer state;
@inject WindowStateHandler handler;

<MudGrid Justify="Justify.FlexStart" Style="align-items:center;">
    <MudItem xs="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@MenuButtonAction" />
    </MudItem>
    <MudItem xs="9">
        <MudText Typo="Typo.h5" Class="mt-1">@state.HeaderText</MudText>
    </MudItem>
        <MudItem xs="1" Class="justify-end">
            <MudIconButton Icon="fa-solid fa-rotate" OnClick="Reload"/>
    </MudItem>
</MudGrid>

    @code {
    [Parameter]
    public Action MenuButtonAction { get; set; }



    protected override void OnInitialized()
    {
        base.OnInitialized();
        state.PropertyChanged += OnHeaderTextChanged;
    }

    public void Dispose()
    {
        state.PropertyChanged -= OnHeaderTextChanged;
    }

    public void OnHeaderTextChanged(object sender, PropertyChangedEventArgs e)
    {
        if (!nameof(StateContainer.HeaderText).Equals(e?.PropertyName))
        {
            return;
        }
        StateHasChanged();
    }

    protected async void Reload()
    {
        await handler.InitState();
    }

}
